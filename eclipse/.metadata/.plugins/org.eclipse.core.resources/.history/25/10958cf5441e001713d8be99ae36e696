import java.util.List;

public class IntervalTree<T extends Comparable<T>> implements IntervalTreeADT<T> {
	
	// TODO declare any data members needed for this class
	private IntervalNode<T> root;
	private int size;
	private int height;

	@Override
	public IntervalNode<T> getRoot() {
		// TODO Auto-generated method stub
		return root;
	}

	@Override
	public void insert(IntervalADT<T> interval)
					throws IllegalArgumentException {
		insertHelper(root, interval);
	}
	
	private void insertHelper(IntervalNode<T> curr, IntervalADT<T> interval)
					throws IllegalArgumentException
	{
		if (curr == null) return;		
		if (interval.compareTo(curr.getInterval()) > 0)
		{
			if (curr.getRightNode() == null)
			{
				curr.setRightNode(new IntervalNode(interval));
				curr.getRightNode().setMaxEnd(interval.getEnd());
				return;
			}
			else
			{
				insertHelper(curr.getRightNode(), interval);
			}
		}
		else if (interval.compareTo(curr.getInterval()) < 0)
		{
			if (curr.getLeftNode() == null)
			{
				curr.setLeftNode(new IntervalNode(interval));
				curr.getLeftNode().setMaxEnd(interval.getEnd());
				return;
			}
			else
			{
				insertHelper(curr.getLeftNode(), interval);
			}
		}
		else
		{
			throw new IllegalArgumentException();
		}
		return;
	}

	@Override
	public void delete(IntervalADT<T> interval)
					throws IntervalNotFoundException, IllegalArgumentException {
		// TODO Auto-generated method stub
		deleteHelper(root, interval);

	}

	@Override
	public IntervalNode<T> deleteHelper(IntervalNode<T> node,
					IntervalADT<T> interval)
					throws IntervalNotFoundException, IllegalArgumentException {
		// TODO Auto-generated method stub
		if (node == null) node.set;
		if (interval.compareTo(node.getInterval()) > 0)
		{
			if (node.getRightNode() == null)
			{
				throw new IntervalNotFoundException(interval.toString() + " not found!");
			}
			else
			{
				return deleteHelper(node.getRightNode(), interval);
			}
		}
		else if (interval.compareTo(node.getInterval()) < 0)
		{
			if (node.getLeftNode() == null)
			{
				throw new IntervalNotFoundException(interval.toString() + " not found!");
			}
			else
			{
				return deleteHelper(node.getLeftNode(), interval);
			}
		}
		else
		{
			return deleteHelper(node, interval);
		}
	}

	@Override
	public List<IntervalADT<T>> findOverlapping(
					IntervalADT<T> interval) {
		// TODO Auto-generated method stub
	}

	@Override
	public List<IntervalADT<T>> searchPoint(T point) {
		// TODO Auto-generated method stub
	}

	@Override
	public int getSize() {
		// TODO Auto-generated method stub
	}

	@Override
	public int getHeight() {
		// TODO Auto-generated method stub
	}

	@Override
	public boolean contains(IntervalADT<T> interval) {
		// TODO Auto-generated method stub
	}

	@Override
	public void printStats() {
		// TODO Auto-generated method stub

	}

}
